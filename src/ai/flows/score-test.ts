// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview An AI agent that scores a test based on AI-provided answers.
 *
 * - scoreTestWithAI - A function that handles the test scoring process using AI.
 * - ScoreTestWithAIInput - The input type for the scoreTestWithAI function.
 * - ScoreTestWithAIOutput - The return type for the scoreTestWithAI function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const QuestionSchema = z.object({
  question: z.string().describe('The text of the question.'),
  options: z.array(z.string()).describe('The possible answers to the question.'),
  answer: z.string().nullable().describe('The correct answer to the question. Null if unknown.'),
  userAnswer: z.string().nullable().describe('The user-selected answer to the question. Null if unanswered.'),
});

export type Question = z.infer<typeof QuestionSchema>;

const ScoreTestWithAIInputSchema = z.object({
  questions: z.array(QuestionSchema).describe('The list of questions with user answers.'),
});

export type ScoreTestWithAIInput = z.infer<typeof ScoreTestWithAIInputSchema>;

const ScoreTestWithAIOutputSchema = z.object({
  results: z.array(
    z.object({
      question: z.string().describe('The question text.'),
      correctAnswer: z.string().describe('The AI-determined correct answer.'),
      userAnswer: z.string().nullable().describe('The user-provided answer, or null if unanswered.'),
      isCorrect: z.boolean().describe('Whether the user answered correctly according to AI.'),
    })
  ),
  score: z.number().describe('The user score (number of correct answers).'),
  totalQuestions: z.number().describe('The total number of questions.'),
});

export type ScoreTestWithAIOutput = z.infer<typeof ScoreTestWithAIOutputSchema>;

export async function scoreTestWithAI(input: ScoreTestWithAIInput): Promise<ScoreTestWithAIOutput> {
  return scoreTestWithAIFlow(input);
}

const scoreTestPrompt = ai.definePrompt({
  name: 'scoreTestPrompt',
  input: {schema: ScoreTestWithAIInputSchema},
  output: {schema: ScoreTestWithAIOutputSchema},
  prompt: `You are an AI test scoring assistant. Given a list of questions and the user's answers,
you will determine the correct answers, compare them to the user's answers, and provide a score.

Here are the questions and user answers:

{{#each questions}}
Question: {{question}}
Options: {{options}}
User Answer: {{userAnswer}}
---
{{/each}}

Provide the results in the following JSON format:

{
  "results": [
    {
      "question": "The question text.",
      "correctAnswer": "The AI-determined correct answer.",
      "userAnswer": "The user-provided answer, or null if unanswered.",
      "isCorrect": true/false,
    }
  ],
  "score": The user score (number of correct answers),
  "totalQuestions": The total number of questions
}

Make sure that correctAnswer value is always one of the options available for the question.
`,
});

const scoreTestWithAIFlow = ai.defineFlow(
  {
    name: 'scoreTestWithAIFlow',
    inputSchema: ScoreTestWithAIInputSchema,
    outputSchema: ScoreTestWithAIOutputSchema,
  },
  async input => {
    const {output} = await scoreTestPrompt(input);

    // Post-process to calculate the score and total questions.
    let score = 0;
    output!.results.forEach(result => {
      if (result.isCorrect) {
        score++;
      }
    });

    output!.score = score;
    output!.totalQuestions = input.questions.length;

    return output!;
  }
);
